import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import cx from "classnames";
import { MouseEvent, useCallback, useMemo, useRef, useState } from "react";
import { Line } from "react-chartjs-2";

import Dropdown, { Option } from "../components/Dropdown";

import styles from "./WishStats.module.scss";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

// TODO support more banners, items
type Item = "5c" | "5w" | "4c" | "4w" | "e5c" | "e5w";
type Banner = "event" | "standard";
type Unit = "pulls" | "primos" | "usd";

// Distribution, representing the number of pulls to receive one copy of
// a certain item.
type Distribution = Array<number>;
type BannerDistribution = { [key in Item]?: Distribution };

type Result =
  | {
      distribution: Distribution;
    }
  | { error: string };

const UNITS = {
  pulls: "Pulls",
  primos: "Primos",
  usd: "USD",
};

// TODO import these from a file generated by scripts
const EVENT_BANNER_DISTRIBUTION: BannerDistribution = {
  "5c": [0, 0.06, 0.12, 0.18, 0.24, 0.3, 0.1],
  "5w": [0, 0.06, 0.12, 0.18, 0.24, 0.3, 0.1],
  "4c": [0, 0.01, 0.02, 0.04, 0.08, 0.16, 0.32, 0.37],
  "4w": [0, 0.01, 0.02, 0.04, 0.08, 0.16, 0.32, 0.37],
};

function distError(d: Distribution) {
  return Math.abs(1 - d.reduce((acc, v) => acc + v));
}

function combineDist(d1: Distribution, d2: Distribution): Distribution {
  const total: Distribution = new Array(d1.length + d2.length - 1).fill(0);
  for (let i = 0; i < d1.length; i++) {
    for (let j = 0; j < d2.length; j++) {
      total[i + j] += d1[i] * d2[j];
    }
  }
  console.log("combineDist error");
  console.log(`d1 length=${d1.length} error=${distError(d1)}`);
  console.log(`d2 length=${d2.length} error=${distError(d2)}`);
  console.log(`tl length=${total.length} error=${distError(total)}`);
  return total;
}

function calculateDist(banner: Banner, item: Item, copies: number) {
  switch (banner) {
    default:
    case "event":
      const dist = EVENT_BANNER_DISTRIBUTION[item];
      if (dist == null) {
        throw new Error(`Event banner is missing distribution for ${item}`);
      }
      let total = dist.slice();
      for (let i = 2; i <= copies; i++) {
        total = combineDist(total, dist);
      }
      return total;
    case "standard":
      throw new Error("unimplemented");
  }
}

function pullsToUnit(pulls: number, unit: Unit): string {
  switch (unit) {
    default:
    case "pulls":
      return pulls.toFixed(0);
    case "primos":
      return (pulls * 160).toFixed(0);
    case "usd":
      return "$" + ((pulls / 50.5) * 100).toFixed(2);
  }
}

function Pulls(props: { children: number; unit: Unit }): JSX.Element {
  const { children, unit } = props;

  // Passed in value is in pulls
  const pulls = pullsToUnit(children, "pulls");
  const primos = pullsToUnit(children, "primos");
  const usd = pullsToUnit(children, "usd");

  const chosenValue = useMemo(() => {
    switch (unit) {
      default:
      case "pulls":
        return `${pulls} pulls`;
      case "primos":
        return `${primos} primos`;
      case "usd":
        return `${usd}`;
    }
  }, [pulls, primos, usd, unit]);

  return <span className={styles.pulls}>{chosenValue}</span>;
}

export default function WishStats(): JSX.Element {
  const [copies, setCopies] = useState<number>(1);
  const [item, setItem] = useState<Item>("5c");
  const [banner, setBanner] = useState<Banner>("event");
  const [unit, setUnit] = useState<Unit>("pulls");

  const [result, setResult] = useState<Result | null>(null);

  const copiesOptions = useMemo(
    (): ReadonlyArray<Option<number>> => [
      { label: "1", value: 1 },
      { label: "2", value: 2 },
      { label: "3", value: 3 },
      { label: "4", value: 4 },
      { label: "5", value: 5 },
      { label: "6", value: 6 },
      { label: "7", value: 7 },
    ],
    []
  );

  const itemOptions = useMemo(
    (): ReadonlyArray<Option<Item>> => [
      { label: "5\u2606 Character", value: "5c" },
      { label: "5\u2606 Weapon", value: "5w" },
      { label: "4\u2606 Character", value: "4c" },
      { label: "4\u2606 Weapon", value: "4w" },
    ],
    []
  );

  const bannerOptions = useMemo(
    (): ReadonlyArray<Option<Banner>> => [
      { label: "Event", value: "event" },
      { label: "Standard", value: "standard" },
    ],
    []
  );

  const unitOptions = useMemo(
    (): ReadonlyArray<Option<Unit>> => [
      { label: "Pulls", value: "pulls" },
      { label: "Primos", value: "primos" },
      { label: "USD", value: "usd" },
    ],
    []
  );

  const calculateDamage = useCallback(() => {
    try {
      const distribution = calculateDist(banner, item, copies);
      setResult({ distribution });
    } catch (e) {
      console.error(e);
      // TODO show error message
      setResult({ error: "unimplemented, check console" });
    }
  }, [copies, item, banner]);

  const charts = useMemo(() => {
    if (result == null || "error" in result) {
      return null;
    }

    const makeOptions = (chartTitle: string) => ({
      responsive: true,
      scales: {
        x: {
          title: {
            display: true,
            text: UNITS[unit],
          },
        },
      },
      interaction: {
        mode: "x" as const,
        intersect: false,
      },
      elements: {
        point: {
          radius: 0,
        },
      },
      plugins: {
        legend: {
          display: false,
        },
        title: {
          display: true,
          text: chartTitle,
        },
      },
    });

    // Labels for PMF and CMF
    const labels = new Array(result.distribution.length)
      .fill(0)
      .map((_, index) => pullsToUnit(index, unit));
    const pmf = result.distribution.slice();
    const cmf = result.distribution.slice();
    for (let i = 1; i < cmf.length; i++) {
      cmf[i] = pmf[i] + cmf[i - 1];
    }

    // Labels for CIs
    const ciLabels = new Array(101).fill(0).map((_, index) => `${index}%`);
    const ci = new Array(101).fill(0.5);
    for (let i = 0, j = 0; i < ci.length; i++) {
      while (cmf[j] <= i / (ci.length - 1) && j < cmf.length) {
        j++;
      }
      ci[i] = j;
    }

    return (
      <>
        <Line
          options={makeOptions("Probability Mass Function")}
          data={{
            labels,
            datasets: [
              {
                data: pmf,
                borderColor: "#ffa600",
              },
            ],
          }}
        />
        <Line
          options={makeOptions("Cumulative Mass Function")}
          data={{
            labels,
            datasets: [
              {
                data: cmf,
                borderColor: "#bc5090",
              },
            ],
          }}
        />
        <Line
          options={makeOptions("Confidence Intervals")}
          data={{
            labels: ciLabels,
            datasets: [
              {
                data: ci,
                borderColor: "#003f5c",
              },
            ],
          }}
        />
      </>
    );
  }, [result, unit]);

  return (
    <div className={styles.container}>
      <div className={styles.prompt}>
        <p>
          <span>
            I want <Dropdown options={copiesOptions} onSet={setCopies} /> copies
          </span>{" "}
          <span>
            of a <Dropdown options={itemOptions} onSet={setItem} />
          </span>{" "}
          <span>
            on the <Dropdown options={bannerOptions} onSet={setBanner} /> banner
          </span>
        </p>
        <button className={styles.roll} onClick={calculateDamage}>
          Calculate Wallet Damage
        </button>
      </div>
      {result != null ? (
        "error" in result ? (
          <>
            <hr />
            <div className={styles.error}>{result.error}</div>
          </>
        ) : (
          <>
            <hr />
            <div className={styles.results}>
              <div>
                Show results in{" "}
                <Dropdown options={unitOptions} onSet={setUnit} />
              </div>
              {/*
              <div className={styles.summary}>
                On average this will require{" "}
                <Pulls unit={unit}>{result.averagePulls}</Pulls>
              </div>
              */}
              <div>{charts}</div>
            </div>
          </>
        )
      ) : null}
    </div>
  );
}
