import { useCallback, useMemo, useState } from "react";

import Dropdown, { Option } from "../components/Dropdown";

import styles from "./WishStats.module.scss";

// TODO support more banners, items
type Item = "5c" | "5w" | "4c" | "4w" | "e5c" | "e5w";
type Banner = "event" | "standard";
type Unit = "pulls" | "primos" | "usd";

type Result =
  | {
      averagePulls: number;
    }
  | { error: string };

// Distribution, representing the number of pulls to receive one copy of
// a certain item.
type Distribution = Array<number>;
type BannerDistribution = { [key in Item]?: Distribution };

// TODO import these from a file generated by scripts
const EVENT_BANNER_DISTRIBUTION: BannerDistribution = {
  "5c": [0.06, 0.12, 0.18, 0.24, 0.3, 0.1],
  "5w": [0.06, 0.12, 0.18, 0.24, 0.3, 0.1],
  "4c": [0.01, 0.02, 0.04, 0.08, 0.16, 0.32, 0.37],
  "4w": [0.01, 0.02, 0.04, 0.08, 0.16, 0.32, 0.37],
};

function distError(d: Distribution) {
  return Math.abs(1 - d.reduce((acc, v) => acc + v));
}

function combineDist(d1: Distribution, d2: Distribution): Distribution {
  const total: Distribution = new Array(d1.length + d2.length - 1).fill(0);
  for (let i = 0; i < d1.length; i++) {
    for (let j = 0; j < d2.length; j++) {
      total[i + j] += d1[i] * d2[j];
    }
  }
  console.log("combineDist error");
  console.log(`d1 length=${d1.length} error=${distError(d1)}`);
  console.log(`d2 length=${d2.length} error=${distError(d2)}`);
  console.log(`tl length=${total.length} error=${distError(total)}`);
  return total;
}

function calculateDist(banner: Banner, item: Item, copies: number) {
  switch (banner) {
    default:
    case "event":
      const dist = EVENT_BANNER_DISTRIBUTION[item];
      if (dist == null) {
        throw new Error(`Event banner is missing distribution for ${item}`);
      }
      let total = dist.slice();
      for (let i = 2; i <= copies; i++) {
        total = combineDist(total, dist);
      }
      return total;
    case "standard":
      throw new Error("unimplemented");
  }
}

function Pulls(props: { children: number; unit: Unit }): JSX.Element {
  const { children, unit } = props;

  // Passed in value is in pulls
  const pulls = children.toFixed(0);
  const primos = (children * 160).toFixed(0);
  const usd = ((children / 50.5) * 100).toFixed(2);
  const tooltip = (
    <div>
      <p>Pulls: {pulls}</p>
      <p>Primos: {primos}</p>
      <p>USD: ${usd}</p>
    </div>
  );

  const chosenValue = useMemo(() => {
    switch (unit) {
      default:
      case "pulls":
        return `${pulls} pulls`;
      case "primos":
        return `${primos} primos`;
      case "usd":
        return `${usd}`;
    }
  }, [pulls, primos, usd, unit]);

  return (
    <span>
      {chosenValue}
      {tooltip}
    </span>
  );
}

export default function WishStats(): JSX.Element {
  const [copies, setCopies] = useState<number>(1);
  const [item, setItem] = useState<Item>("5c");
  const [banner, setBanner] = useState<Banner>("event");
  const [unit, setUnit] = useState<Unit>("pulls");

  const [result, setResult] = useState<Result | null>(null);

  const copiesOptions = useMemo(
    (): ReadonlyArray<Option<number>> => [
      { label: "1", value: 1 },
      { label: "2", value: 2 },
      { label: "3", value: 3 },
      { label: "4", value: 4 },
      { label: "5", value: 5 },
      { label: "6", value: 6 },
      { label: "7", value: 7 },
    ],
    []
  );

  const itemOptions = useMemo(
    (): ReadonlyArray<Option<Item>> => [
      { label: "Specific 5* Char", value: "5c" },
      { label: "Specific 5* Weapon", value: "5w" },
      { label: "Specific 4* Char", value: "4c" },
      { label: "Specific 4* Weapon", value: "4w" },
    ],
    []
  );

  const bannerOptions = useMemo(
    (): ReadonlyArray<Option<Banner>> => [
      { label: "Event", value: "event" },
      { label: "Standard", value: "standard" },
    ],
    []
  );

  const unitOptions = useMemo(
    (): ReadonlyArray<Option<Unit>> => [
      { label: "Pulls", value: "pulls" },
      { label: "Primos", value: "primos" },
      { label: "USD", value: "usd" },
    ],
    []
  );

  const calculateDamage = useCallback(() => {
    try {
      const distribution = calculateDist(banner, item, copies);
      console.log(distribution);
      setResult({ error: "unimplemented, check console" });
    } catch (e) {
      console.error(e);
      // TODO show error message
      setResult({ error: "unimplemented, check console" });
    }
  }, [copies, item, banner]);

  return (
    <div>
      <div className={styles.prompt}>
        <p>
          <span>
            I want <Dropdown options={copiesOptions} onSet={setCopies} /> copies
          </span>
          <span>
            of <Dropdown options={itemOptions} onSet={setItem} />
          </span>
          <span>
            on the <Dropdown options={bannerOptions} onSet={setBanner} /> banner
          </span>
        </p>
        <button className={styles.roll} onClick={calculateDamage}>
          Calculate Wallet Damage
        </button>
      </div>
      {result != null ? (
        "error" in result ? (
          <div className={styles.error}>{result.error}</div>
        ) : (
          <div className={styles.results}>
            <p>
              Show me results in{" "}
              <Dropdown options={unitOptions} onSet={setUnit} />
            </p>
            <p>
              On average this will require{" "}
              <Pulls unit={unit}>{result.averagePulls}</Pulls>
            </p>
          </div>
        )
      ) : null}
    </div>
  );
}
